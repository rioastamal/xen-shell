#!/usr/bin/perl
#
# Provide a simple command line shell program which can be used as
# the login shell for a Xen user.
#
# This provides basic abilities for the user to control their instance.
#
# Steve
# --
#

use strict;
use warnings;
use English;

#
#  Version number
#
my $VERSION   = '$Revision: 1.12 $';
if ( $VERSION =~ /(1.[0-9.]+) / ) { $VERSION = $1; }


#
# Get the username of the person who is currently running the software.
#
# Use this form to make sure even when running under sudo, etc, it works.
#
my $USER = getpwuid( $REAL_USER_ID );


#
#  Make sure we have libterm-readline-gnu installed.
#
BEGIN {
    eval {
        require Term::ReadLine;
    };
};
if ( $@ )
{
    print "Package 'Term::ReadLine' not installed.\n";
    print "Aborting\n";
    exit;
}



#
#  Dispatch table which contains the mappings between the commands
# we make available and the routine which implements that behaviour.
#
my %dispatch =
   (
    "console"  => \&do_console,
    "serial"   => \&do_console,
    "uptime"   => \&show_uptime,
    "status"   => \&show_status,
    "boot"     => \&do_boot,
    "shutdown" => \&do_shutdown,,
    "reboot"   => \&do_reboot,
    "help"     => \&show_help,
   );

#
#  This array is used to setup the command completion.
#
my @cmds = keys %dispatch;


#
#  Help text
#
my %help =
   (
    "help" => "Show help about the specified command, or all commands.",
    "console" => "Connect to the serial console of the Xen instance using GNU Screen.\nTo exit the serial prompt type Ctrl+], or exit screen with Ctrl+a k, or Ctrl+a d.",
    "serial" => "Connect to the serial console of the Xen instance using GNU Screen.\nTo exit the serial prompt type Ctrl+], or exit screen with Ctrl+a k, or Ctrl+a d.",
    "uptime" => "Show the uptime of the current host",
    "status" => "Show whether the instance is running or not",
    "boot" => "Start the Xen guest, if it is not running.",
    "reboot" => "Reboot the Xen guest.",
    "shutdown" => "Shut down the Xen guest.",
   );

#
#  Create the readline interface.
#
my $term = new Term::ReadLine 'xen-shell';


#
# Show a greeting:
#
print "xen-shell v$VERSION - type 'help' for help\n";

#
#  Add completion
#
my $attribs = $term->Attribs;
$attribs->{completion_entry_function} = $attribs->{list_completion_function};
$attribs->{completion_word}           = \@cmds;

#
#  Command loop.
#
while ( defined (my $line = $term->readline('xen-shell> ')) )
{
    # Exit immediately
    exit if ( $line =~ /^(quit|exit)/i );

    # Ignore empty lines.
    next if ( !length( $line ) );

    # Strip leading and trailing whitespace.
    $line =~ s/^\s+//;
    $line =~ s/\s+$//;

    # If we have arguements then split them up.
    my ($word, $args) = split( /[ \t]/, $line );

    # Lookup command in our dispatch table.
    if ( $dispatch{ lc $word } )
    {
        $dispatch{lc $word}->( $args );
        $term->addhistory( $line );
    }
    else
    {
        print "Unknown command: '$word' - type 'help' for help.\n";
    }
}

exit;



=head2 show_uptime

  Show uptime of the guest.

=cut
sub show_uptime
{
    my $host_uptime = `uptime`;
    chomp( $host_uptime );

    print "Host : $host_uptime\n";
}


=head2 show_status

  Show status of the guest system:  Running/Shutdown

=cut

sub show_status
{
    my $running = 0;

    #
    # See if the instance is running
    #
    my $cmd = "sudo xm list $USER 2>/dev/null | grep $USER";
    my $out = `$cmd`;

    if ( length( $out ) )
    {
        $running = 1;
    }

    if ( $running )
    {
        print "Guest: Running\n";
    }
    else
    {
        print "Guest: Shutdown\n";
    }
    show_uptime();
}


=sub show_help

  Show the user some help

=cut

sub show_help
{
    my ( $term ) = ( @_ );

    #
    #  Help on a single command
    #
    if ( defined( $term ) )
    {
        print "\nCommand: $term\n";
        print $help{ lc $term };
        print "\n";
        return;
    }
    print <<E_O_HELP;

xen-shell v$VERSION

The following commands are available within this shell:

  status    Show your machines status.
  uptime    Show the uptime information of the host system.

  boot      Boot up your xen guest instance.
  shutdown  Shut down your Xen guest instance.
  reboot    Reboot your Xen guest instance.

  console   Gain access to your Xen guest via the serial console.

  For help on each command enter "help command".

E_O_HELP
}



sub do_reboot
{
    print "Rebooting instance: $USER\n";
    system( "sudo xm reboot $USER" );
}

sub do_shutdown
{
    print "Shutting down instance: $USER\n";
    system( "sudo xm shutdown $USER" );
}

sub do_boot
{
    print "Booting instance: $USER\n";
    system( "sudo xm create $USER.cfg" );
    print "Use 'console' to see the bootup messages.\n";
}

sub do_console
{
    print "Running console for $USER\n";
    system( "xen-console" );
}
